#lang eopl
;Lab 3
;Adam Gincel
;I pledge my honor that I have abided by the Stevens Honor System.


(define (element? item list-of-items)        ;given
  (if (null? list-of-items)                  ;Is our "set" empty?
      #f                                     ;If empty, not an element!
      (if (equal? item (car list-of-items))  ;Is our item first in list?
          #t                                 ;Yes?  Then it's an element!
          (element? item (cdr list-of-items)))));No? Check the rest.

(define (make-set list-of-items)
  (cond [(null? list-of-items);An empty list can have no duplicates,
         '()]                 ;So just return an empty list.
        [(element? (car list-of-items) (cdr list-of-items))
         (make-set (cdr list-of-items))];We keep only the LAST item
        [else                           ;if there are duplicates
         (cons (car list-of-items) (make-set (cdr list-of-items)))]))
         ;this cons keeps an item ONLY if no more are available in list

(define (union setA setB)
  (make-set (append setA setB)))




 


