/*
511HW5.shit

Introduction:
- At any time only one process is allowed to actually provide a given service.
	- This process is called the "leader"

- Leader Election:
	- Leader election is a simple form of symmetry breaking.
	- Sometimes it suffices to elect an arbitrary process, but for other services it is important to elect the process with the best capabilities for performing that service.
	- Our approach (i think?)
		- Each process has a unique ID, and we assume that we can order all of the IDs.
		- The higher the process' ID, the better its capabilities.

The Assignment: Implement 1st algorithm, do verification of the 2nd.
- Uses ring model (big ol' loop of processes)
- Two algorithms
	- In each algorithim, initally all processes are active. A process is dropped out of the race to become leader when it becomes passive. These two algorithims decide which processes become passive.
	- Pt1: Chang-Roberts LEA (CR-LEA)
		- Highest ID completes one round in the ring.
		- look at hw5.pdf, section 4.1 for pseudocode.
	- Pt2: Dolev-Klawe-Rodeh LEA (DKR-LEA)
		- http://w3.cs.huji.ac.il/~dolev/pubs/n-log-n.pdf
		- We already have the implementation provided, but here is the algorithm:
			- Each active process knows the ids of the two closest processes on the left.
			- This allows each active process to determine if it is the active process following its local maximum
			- If it is the local active process, continue as active on to the next phase
			- If not, become passive and act as a communication relay.

Questions to ask:
1) Why does DKR need to know the TWO closest processes?
2)

*/




/*5.2.1 with line numbers removed:*/

# define N 5 	/* number of processes in the ring */
# define L 10 	/* size of buffer ( >= 2*N) */
byte I ; 		/* will be used in init for assigning ids to nodes */

mtype = { one , two , winner }; 		/* symb . Msg . Names */
chan q[N] = [ L] of { mtype , byte }; 	/* asynchronous channels */

proctype nnode ( chan inp , out ; byte mynumber )
{	bit Active = 1, know_winner = 0;
	byte nr , maximum = mynumber , neighbourR ;

	xr inp ; /* channel assertion : exclusive recv access to channel in */
	xs out ; /* channel assertion : exclusive send access to channel out */

	printf (" MSC : %d\n", mynumber );
	out ! one ( mynumber );
end : do
	:: inp ? one ( nr ) ->
		if
		:: Active ->
			if
			:: nr != maximum ->
				out ! two ( nr );
				neighbourR = nr
			:: else ->
				know_winner = 1;
				out ! winner , nr ;
			fi
		:: else ->
			 out ! one ( nr )
		 fi

	:: inp ? two ( nr ) ->
		if
		:: Active ->
			if
			:: neighbourR > nr && neighbourR > maximum ->
				maximum = neighbourR ;
				out ! one ( neighbourR )
			:: else ->
				Active = 0
			fi
		:: else ->
			out ! two ( nr )
		fi
	:: inp ? winner , nr ->
		if
		:: nr != mynumber ->
			printf (" MSC : LOST \n");
		:: else ->
			printf (" MSC : LEADER \n");
		fi;
		if
		:: know_winner
		:: else -> out ! winner , nr
		fi;
		break
	od
}


/*5.2.2 with line numbers removed:*/
init {
	byte proc ;
	byte Ini [6]; /* N <=6 randomize the process numbers */
	atomic {
		I = 1; /* pick a number to be assigned 1.. N */
		do
		:: I <= N ->
			if /* non - deterministic choice */
			:: Ini [0] == 0 && N >= 1 -> Ini [0] = I
			:: Ini [1] == 0 && N >= 2 -> Ini [1] = I
			:: Ini [2] == 0 && N >= 3 -> Ini [2] = I
			:: Ini [3] == 0 && N >= 4 -> Ini [3] = I
			:: Ini [4] == 0 && N >= 5 -> Ini [4] = I
			:: Ini [5] == 0 && N >= 6 -> Ini [5] = I /* works for up to N=6 */
			fi;
		I ++
		:: I > N -> /* assigned all numbers 1..N */
			break
		od;
		
		/* start all nodes in the ring */
		proc = 1;
		do
		:: proc <= N ->
			run nnode (q [ proc -1] , q[ proc %N] , Ini [ proc -1]);
			proc ++
		:: proc > N ->
			break
		od
	}
}